%li.list-group-item.list-group-item-publication
  %h3.list-group-item-heading
    = publication.title

    - if publication.has_user?(current_user)
      - css = [ 'list-group-item-action-toggle-flag' ]
      - flagged = publication.author_for_user(current_user).flagged?
      - css << 'active' if flagged
      - title = taction (flagged ? :unflag : :flag)
      = link_to fa_icon('flag'), [ :toggle_flag, :admin, publication ], method: :patch, class: css.join(' '), title: title

  = author_list_for publication

  .list-group-item-meta
    = publication_meta_for publication, use_labels: false

  .list-group-item-actions
    .btn-group
      = button_tag type: 'button', class: 'btn btn-default dropdown-toggle', data: { toggle: 'dropdown' } do
        = fa_icon('wrench')
        %span.caret
      %ul.dropdown-menu
        = content_tag :li, item_action(taction(:go_to_website), publication.link, icon: 'external-link fw', target: '_blank', class: nil) unless publication.link.blank?

        - if current_user.super_user?
          %li= edit_action_for publication, icon: 'edit fw', class: nil
        - if publication.has_user? current_user
          %li.divider
          %li= item_action taction(:unlink), unlink_admin_publication_path(publication), icon: 'unlink fw', method: :delete, data: { confirm: I18n.t('views.admin.publications.confirmations.unlink') }, class: nil

    - if !publication.has_user?(current_user) && publication.unlinked_authors.any?
      .btn-group.pull-right
        %button.dropdown-toggle{ type: :button, class: 'btn btn-default', title: taction(:link), data: { toggle: 'dropdown' }}
          = fa_icon('link')
          %span.caret
        %ul.dropdown-menu
          %li.dropdown-header= I18n.t('views.admin.publications.buttons.link_through')
          - publication.unlinked_authors.each do |author|
            %li= link_to author.name, link_admin_publication_path(publication, author_id: author), method: :patch
